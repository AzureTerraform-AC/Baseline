name: Apply_TF_Plan
'on':
  workflow_call:
    inputs:
      path:
        description: Specifies the path of the root terraform module.
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      az_resource_group:
        description: >-
          Specifies the Azure Resource Group where the backend storage account
          is hosted.
        required: true
        type: string
      az_storage_acc:
        description: Specifies the Azure Storage Account where the backend state is hosted.
        required: true
        type: string
      az_container_name:
        description: >-
          Specifies the Azure Storage account container where backend Terraform
          state is hosted.
        required: true
        type: string
      prefix:
        description: >-
          Specifies the Terraform state file name. Workflow artifact will be the
          same name.
        required: true
        type: string
      environment:
        description: 'Specifies the GitHub deployment environment.'
        required: true
        type: string
      tf_vars_file:
        description: Specifies the Terraform TFVARS file.
        required: true
        type: string
      arm_client_id:
        description: Specifies the Azure ARM CLIENT ID.
        required: true
        type: string
      arm_subscription_id:
        description: Specifies the Azure ARM SUBSCRIPTION ID.
        required: true
        type: string
      arm_tenant_id:
        description: Specifies the Azure ARM TENANT ID.
        required: true
        type: string
    secrets:
      arm_client_secret:
        description: Specifies the Azure ARM CLIENT SECRET.
        required: true    
       

jobs:
  apply-plan:
    if: github.ref == 'refs/heads/deployments' # To update to main branch after tests.
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: '${{ inputs.path }}'
    env:
      environment: ${{ inputs.environment }}
      STORAGE_ACCOUNT: '${{ inputs.az_storage_acc }}'
      CONTAINER_NAME: '${{ inputs.az_container_name }}'
      RESOURCE_GROUP: '${{ inputs.az_resource_group }}'
      TF_KEY: '${{ inputs.environment }}-${{ inputs.prefix }}.tfstate'
      TF_VARS: '${{ inputs.tf_vars_file }}'
      ARM_CLIENT_ID: '${{ inputs.arm_client_id }}'
      ARM_CLIENT_SECRET: '${{ secrets.arm_client_secret }}'
      ARM_SUBSCRIPTION_ID: '${{ inputs.arm_subscription_id }}'
      ARM_TENANT_ID: '${{ inputs.arm_tenant_id }}'
      


    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

    # Setup Terraform Version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: '${{ inputs.tf_version }}'

    # Initialize Terraform           
      - name: Terraform Init
        id: init
        run: >-
          terraform init
          --backend-config="storage_account_name=$STORAGE_ACCOUNT"
          --backend-config="container_name=$CONTAINER_NAME"
          --backend-config="resource_group_name=$RESOURCE_GROUP"
          --backend-config="key=$TF_KEY"

    # # Plan Terraform    
    #   - name: Terraform Plan
    #     id: plan
    #     run: terraform plan -var-file=$TF_VARS --out=plan.tfplan
    #   - name: Terraform Plan Status
    #     if: steps.plan.outcome == 'failure'
    #     run: exit 1

    # Download the plan artifact
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.environment }}-terraform-plan
          path: ${{ inputs.environment }}.tfplan    
    # Apply Terraform
      - name: Terraform Apply
        run: terraform apply plan.tfplan           
            
