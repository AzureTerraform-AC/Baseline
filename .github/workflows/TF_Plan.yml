name: "Build_TF_Plan"
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use.'
        required: false
        type: string
        default: latest
      environment:
        description: 'Specifies the GitHub deployment environment.'
        required: true
        type: string
    secrets:
      arm_client_secret:
        description: Specifies the Azure ARM CLIENT SECRET.
        required: true    

jobs:
  build-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
    env:
      STORAGE_ACCOUNT: ${{ vars.AZ_STORAGE_ACC }}
      CONTAINER_NAME: ${{ vars.AZ_CONTAINER_NAME }}
      RESOURCE_GROUP: ${{ vars.AZ_RESOURCE_GROUP }}
      TF_KEY: ${{ vars.ENV }}-${{ vars.PREFIX }}.tfstate
      TF_VARS: ./env/${{ vars.ENV }}_${{ vars.PREFIX }}.tfvars 
      ARM_SUBSCRIPTION_ID: ${{ vars.arm_subscription_id }}
      ARM_TENANT_ID: ${{ vars.arm_tenant_id }} 
      ARM_CLIENT_ID: ${{ vars.arm_client_id }}  
      ENV: ${{ vars.ENV }}         
      ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

    # Setup Terraform Version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ inputs.tf_version }}   

    # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: '3.10'             

    # Initialize Terraform
      - name: Terraform Init
        id: init
        run: terraform init --backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT }}" --backend-config="container_name=${{ env.CONTAINER_NAME }}" --backend-config="resource_group_name=${{ env.RESOURCE_GROUP }}" --backend-config="key=${{ env.TF_KEY }}"   
       
    # Format Terraform
      - name: Terraform Format
        id: fmt
        run: terraform fmt --recursive 

    # Validate Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate

    # Install Checkov
      - name: Install Checkov
        id: checkov
        run: pip3 install checkov
      - name: Show Checkov Version
        run: checkov -v

    # Run Checkov    
      - name: Run Checkov
        run: checkov -d . -o sarif -s --output-file-path ${{ env.ENV }}-results.sarif  --framework terraform --skip-check CKV_AZURE_59,CKV_AZURE_40,CKV_AZURE_53,CKV_AZURE_37,CKV_AZURE_41,CKV_AZURE_1     

    # Upload Checkov Artifact
      - name: Upload Checkov Artifact
        uses: actions/upload-artifact@v4
        with:
            name: ${{ env.ENV }}-checkov-results
            path: ${{ env.ENV }}-results.sarif
                 
    # Run TFSec 
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3 

    # Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=$TF_VARS --out=${{ env.ENV }}.tfplan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Upload plan as an artifact    
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with: 
          name: ${{ env.ENV }}-terraform-plan
          path: ${{ inputs.path }}/${{ env.ENV }}.tfplan
      
   
