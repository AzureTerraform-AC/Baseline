### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###
name: "Build_TF_Plan"
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      az_resource_group:
        description: 'Specifies the Azure Resource Group where the backend storage account is hosted.'
        required: true
        type: string
      az_storage_acc:
        description: 'Specifies the Azure Storage Account where the backend state is hosted.'
        required: true
        type: string
      az_container_name:
        description: 'Specifies the Azure Storage account container where backend Terraform state is hosted.'
        required: true
        type: string
      tf_key:
        description: 'Specifies the Terraform state file name for this plan. Workflow artifact will use same name'
        required: true
        type: string
      # gh_environment:
      #   description: 'Specifies the GitHub deployment environment.'
      #   required: false
      #   type: string
      #   default: null
      tf_vars_file:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string
      # enable_TFSEC:
      #   description: '(Optional) Enables TFSEC IaC scans and code quality checks on Terraform configurations'
      #   required: false
      #   type: boolean
      #   default: false
    secrets:
      arm_client_id:
        description: 'Specifies the Azure ARM CLIENT ID.'
        required: true
      arm_client_secret:
        description: 'Specifies the Azure ARM CLIENT SECRET.'
        required: true
      arm_subscription_id:
        description: 'Specifies the Azure ARM SUBSCRIPTION ID.'
        required: true
      arm_tenant_id:
        description: 'Specifies the Azure ARM TENANT ID.'
        required: true

jobs:
  build-plan:
    runs-on: ubuntu-latest
    # environment: ${{ inputs.gh_environment }}

    strategy:
      matrix:
        environment: [dev]  # Define different environments

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
    env:
      STORAGE_ACCOUNT: ${{ inputs.az_storage_acc }}
      CONTAINER_NAME: ${{ inputs.az_container_name }}
      RESOURCE_GROUP: ${{ inputs.az_resource_group }}
      TF_KEY: ${{ inputs.tf_key }}.tfstate
      TF_VARS: ${{ inputs.tf_vars_file }}
      ###AZURE Client details###
      ARM_CLIENT_ID: ${{ secrets.arm_client_id }}
      ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.arm_subscription_id }}
      ARM_TENANT_ID: ${{ secrets.arm_tenant_id }}
  
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

      - name: Set Environment Secrets
        id: set_env_secrets
        run: |
          if [ "${{ matrix.environment }}" == "dev" ]; then
            echo "Setting secrets for dev environment"
            echo "::set-output name=az_resource_group::${{ secrets.DEV_AZ_RESOURCE_GROUP }}"
            echo "::set-output name=az_storage_acc::${{ secrets.DEV_AZ_STORAGE_ACC }}"
            echo "::set-output name=az_container_name::${{ secrets.DEV_AZ_CONTAINER_NAME }}"
            echo "::set-output name=tf_key::${{ secrets.DEV_TF_KEY }}"
            # Set other secrets for dev environment
          elif [ "${{ matrix.environment }}" == "staging" ]; then
            echo "Setting secrets for staging environment"
            echo "::set-output name=az_resource_group::${{ secrets.STAGING_AZ_RESOURCE_GROUP }}"
            echo "::set-output name=az_storage_acc::${{ secrets.STAGING_AZ_STORAGE_ACC }}"
            # Set other secrets for staging environment
          elif [ "${{ matrix.environment }}" == "production" ]; then
            echo "Setting secrets for production environment"
            echo "::set-output name=az_resource_group::${{ secrets.PROD_AZ_RESOURCE_GROUP }}"
            echo "::set-output name=az_storage_acc::${{ secrets.PROD_AZ_STORAGE_ACC }}"
            # Set other secrets for production environment
          else
            echo "Invalid environment"
            exit 1
          fi

    # Setup Terraform Version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ inputs.tf_version }}
    # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: '3.10'
    # Install Checkov
      - name: Install Checkov
        id: checkov
        run: pip3 install checkov
      - name: Show Checkov Version
        run: checkov -v

      - name: Run Checkov
        run: checkov -d . -o sarif -s --framework terraform --skip-check CKV_AZURE_59,CKV_AZURE_40,CKV_AZURE_53,CKV_AZURE_37,CKV_AZURE_41,CKV_AZURE_1
      - name: Upload Checkov Artifact
        uses: actions/upload-artifact@v4
        with:
         name: checkov-results
         path: ./results.sarif        

      # Terraform Format
      - name: Terraform Format
        id: fmt
        run: terraform fmt --recursive
      # Checkov Using Bridgecrew action
      # - name: Test with Checkov
      #   id: checkov
      #   uses: bridgecrewio/checkov-action@master
      #   with:
      #     directory: ./
      #     framework: terraform 

      - name: Terraform Init
        id: init
        run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_KEY"   
       
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=$TF_VARS --out=plan.tfplan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
