name: "Build_TF_Plan"
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      az_resource_group:
        description: 'Specifies the Azure Resource Group where the backend storage account is hosted.'
        required: true
        type: string
      az_storage_acc:
        description: 'Specifies the Azure Storage Account where the backend state is hosted.'
        required: true
        type: string
      az_container_name:
        description: 'Specifies the Azure Storage account container where backend Terraform state is hosted.'
        required: true
        type: string
      prefix:
        description: 'Specifies a generic name to identify the resources in this repo (also used to name tfstate)'
        required: true
        type: string
      arm_subscription_id:
        description: 'Specifies the ARM subscription id'
        required: true
        type: string
      arm_client_id:
        description: 'Specifies the ARM client id'
        required: true
        type: string
      arm_tenant_id:
        description: 'Specifies the ARM Tenant id'
        required: true
        type: string
      environment:
        description: 'Specifies the GitHub deployment environment.'
        required: true
        type: string
      tf_vars_file:
        description: 'Specifies the Terraform TFVARS file.'
        required: true
        type: string
      # required_approver:
      #   description: 'GitHub riquired approver.'
      #   required: true
      #   type: string
      enable_TFSEC:
        description: '(Optional) Enables TFSEC IaC scans and code quality checks on Terraform configurations'
        required: false
        type: boolean
        default: false
    secrets:
      arm_client_secret:
        description: Specifies the Azure ARM CLIENT SECRET.
        required: true    
     
jobs:
  build-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
    env:
      STORAGE_ACCOUNT: ${{ inputs.az_storage_acc }}
      CONTAINER_NAME: ${{ inputs.az_container_name }}
      RESOURCE_GROUP: ${{ inputs.az_resource_group }}
      TF_KEY: ${{ inputs.environment }}-${{ inputs.prefix }}.tfstate
      TF_VARS: ${{ inputs.tf_vars_file }}
      ARM_SUBSCRIPTION_ID: ${{ inputs.arm_subscription_id }}
      ARM_TENANT_ID: ${{ inputs.arm_tenant_id }} 
      ARM_CLIENT_ID: ${{ inputs.arm_client_id }}           
      ###AZURE Client details###
      ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}

  
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.2

    # Setup Terraform Version
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.0.0
        with:
          terraform_version: ${{ inputs.tf_version }}   

    # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with: 
          python-version: '3.10'             

    # Initialize Terraform
      - name: Terraform Init
        id: init
        run: terraform init --backend-config="storage_account_name=$STORAGE_ACCOUNT" --backend-config="container_name=$CONTAINER_NAME" --backend-config="resource_group_name=$RESOURCE_GROUP" --backend-config="key=$TF_KEY"   
       
    # Format Terraform
      - name: Terraform Format
        id: fmt
        run: terraform fmt --recursive 

    # Validate Terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate

    # Install Checkov
      - name: Install Checkov
        id: checkov
        run: pip3 install checkov
      - name: Show Checkov Version
        run: checkov -v

    # Run Checkov    
      - name: Run Checkov
        run: checkov -d . -o sarif -s --output-file-path ${{ inputs.environment }}-results.sarif  --framework terraform --skip-check CKV_AZURE_59,CKV_AZURE_40,CKV_AZURE_53,CKV_AZURE_37,CKV_AZURE_41,CKV_AZURE_1     

    # Upload Checkov Artifact
      - name: Upload Checkov Artifact
        uses: actions/upload-artifact@v4
        with:
            name: ${{ inputs.environment }}-checkov-results
            path: ${{ inputs.environment }}-results.sarif
                 
    # Run TFSec 
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3 

    # Terraform Plan
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=$TF_VARS --out=${{ inputs.environment }}.tfplan

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Upload plan as an artifact    
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with: 
          name: ${{ inputs.environment }}-terraform-plan
          path: ${{ inputs.environment }}.tfplan

      - name: add-plan-comment
        id: pr-comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan \`${{ steps.plan.outcome }}\`
        
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.path }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })        
   
